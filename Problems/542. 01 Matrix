class Solution {
    public int[][] updateMatrix(int[][] mat) {
        
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};
        
        int N = mat.length;
        int M = mat[0].length;
        
        int[][] dist = new int[N][M];
        for(int i=0; i<N; ++i){
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        
        
        Queue<int[]> q = new LinkedList<>();
        for(int i=0; i<N; ++i){
            for(int j=0; j<M; ++j){
                if(mat[i][j] == 0){
                    dist[i][j] = 0;
                    q.add(new int[]{i, j});
                }
            }
        }
        
        while(!q.isEmpty()) {
            int x = q.peek()[0];
            int y = q.peek()[1];
            q.poll();
            
            for(int i=0; i<4; ++i) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                
                if(0<=nx && nx<N && 0<=ny && ny<M && dist[nx][ny] > dist[x][y] + 1){
                    q.add(new int[]{nx, ny});
                    dist[nx][ny] = dist[x][y] + 1;
                }
            }
        }
        
        return dist;
    }
}
