class Solution {
    
    private int[] nums;
    private int total;
    private int[][] memo;
    private int target;
    
    public int findTargetSumWays(int[] nums, int target) {
        
        this.nums = nums;
        this.target = target;
        
        total = Arrays.stream(nums).sum();
        memo = new int[nums.length][2*total+1];
        for(int i=0; i<nums.length; ++i) {
            Arrays.fill(memo[i], Integer.MIN_VALUE);
        }
        
        return dfs(0, 0);
    }
    
    private int dfs(int idx, int sum) {
        if(idx == nums.length) {
            return sum==target ? 1 : 0;
        }
        if(memo[idx][sum+total] != Integer.MIN_VALUE) {
            return memo[idx][sum+total];
        }
        
        int add = dfs(idx+1, sum+nums[idx]);
        int sub = dfs(idx+1, sum-nums[idx]);
        memo[idx][sum + total] = add+sub;
        
        return memo[idx][sum + total];
    }
}
