class Solution {
    
    private int sum;
    private int N;
    private int[][] memo;
    
    private int[] nums;
    private int target;
    
    
    public int findTargetSumWays(int[] nums, int target) {
        sum = Arrays.stream(nums).sum();
        N = nums.length;
        memo = new int[N][2*sum+1];
        for(int i=0; i<N; ++i) {
            Arrays.fill(memo[i], -1);
        }
        
        this.nums = nums;
        this.target = target;
        
        return dfs(0, 0);
    }
    
    private int dfs(int i, int current) {
        if(i==N) {
            return current==target ? 1 : 0;
        }
        if(memo[i][current+sum] != -1) {
            return memo[i][current+sum];
        }
        
        int sub = dfs(i+1, current+nums[i]);
        int add = dfs(i+1, current-nums[i]);
        memo[i][current+sum] = sub + add;
        return memo[i][current+sum];
    }
}
