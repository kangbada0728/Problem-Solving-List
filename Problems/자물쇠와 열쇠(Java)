class Solution {
		
		int M = 0;
		int N = 0;
		
		
		void getKeys(int[][][] keys, int[][] key) {
			for(int i=0; i<M; ++i) {
				for(int j=0; j<M; ++j) {
					keys[0][i][j] = key[i][j]; 
				}
			}
			
			for(int k=1; k<4; ++k) {
				for(int i=0; i<M; ++i) {
                    for(int j=0; j<M; ++j) {
                        keys[k][i][j] = keys[k-1][M-1-j][i]; 
                    }
			    }
			}
		}
		
		void fill_lock(int[][] lock, int[][] key, int lx, int ly) {
			for(int i=0; i<M; ++i) {
				for(int j=0; j<M; ++j) {
					lock[lx+i][ly+j] += key[i][j];
				}
			}
		}
		
		void unfill_lock(int[][] lock, int[][] key, int lx, int ly) {
			for(int i=0; i<M; ++i) {
				for(int j=0; j<M; ++j) {
					lock[lx+i][ly+j] -= key[i][j];
				}
			}
		}
		
		boolean checking(int[][] lock) {
			for(int i=M; i<N+M; ++i) {
				for(int j=M; j<N+M; ++j) {
					if(lock[i][j]==0 || lock[i][j]>1) {
						return false;
					}
				}
			}
			return true;
		}
		
		
	    public boolean solution(int[][] key, int[][] prev_lock) {
	        
	        M = key.length;
	        N = prev_lock.length;
	        
	        int[][] lock = new int[N+M+M][N+M+M];
	        for(int i=M; i<M+N; ++i) {
	        	for(int j=M; j<M+N; ++j) {
	        		lock[i][j] = prev_lock[i-M][j-M];
	        	}
	        }
	        
	        int[][][] keys = new int[4][M][M];
	        getKeys(keys, key);
	        
	        for(int lx=0; lx<N+M; ++lx) {
	        	for(int ly=0; ly<N+M; ++ly) {
	        		for(int i=0; i<4; ++i) {
	        			fill_lock(lock, keys[i], lx, ly);
	        			if(checking(lock)) {
	        				return true;
	        			}
	        			unfill_lock(lock, keys[i], lx, ly);
	        		}
	        	}	
	        }
	        
	        return false;
	    }
	}
