class Solution {
    public int solution(int N, int M, int[][] edge_list, int K, int[] gps_log) {
        int answer = 0;
        
        int[][] edge = new int[N+1][N+1];
        for(int i=0; i<edge_list.length; ++i) {
            int x = edge_list[i][0];
            int y = edge_list[i][1];
            edge[x][y] = 1;
            edge[y][x] = 1;
        }
        for(int i=0; i<=N; ++i) {
            edge[i][i] = 1;
        }
        
        int[][] memo = new int[N+1][K];
        for(int i=1; i<N+1; ++i) {
            for(int j=0; j<K; ++j) {
                memo[i][j] = 100000000;
            }
        }
        memo[gps_log[0]][0] = 0;
        
        for(int k=1; k<K; ++k) {
            for(int cur=1; cur<=N; ++cur) {
                for(int prev=1; prev<=N; ++prev) {
                    if(edge[prev][cur]==1) {
                        if(gps_log[k]==cur) {
                            memo[cur][k] = Math.min(memo[cur][k], memo[prev][k-1]);
                        } else {
                            memo[cur][k] = Math.min(memo[cur][k], memo[prev][k-1] + 1);
                        }
                    }
                }
            }
        }
        
        if(memo[gps_log[gps_log.length-1]][K-1]==100000000) {
            return -1;
        }
        
        return memo[gps_log[gps_log.length-1]][K-1];
    }
}
